# 6. 컴포넌트 반복

## 1. 자바스크립트 배열의 map() 함수

자바스크립트 배열 객체의 내장 함수인 map 함수를 사용하여 반복되는 컴포넌트를 렌더링할 수 있음
map 함수는 파라미터로 전달된 함수를 사용해서 배열 내 각 요소를 원하는 규칙에 따라 변환한 후 그 결과로 새로운 배열 생성

arr.map(callback, [thisArg])

이 함수의 파라미터는 다음과 같음
callback: 새로운 배열의 요소를 생성하는 함수로 파라미터는 다음 세 가지

1. - currentValue: 현재 처리하고 있는 요소
2. - index: 현재 처리하고 있는 요소의 index 값
3. - array: 현재 처리하고 있는 원본 배열

thisArg(선택 항목): callback 함수 내부에서 사용할 this 레퍼런스

## 2. key

리액트에서 key는 컴포넌트 배열을 렌더링했을 때 어떤 원소에 변동이 있었는지 알아내려고 사용함
예를 들어, 유동적인 데이터를 다룰 때 원소를 새로 생성할 수도, 제거할 수도, 수정할 수도 있음
key가 없을 때 Virtual DOM을 비교하는 과정에서 리스트를 순차적으로 비교하면서 변화를 감지함
하지만 key가 있다면 이 값을 사용하여 어떤 변화가 일어났는지 더욱 빠르게 알아낼 수 있음

key 값을 설정할 때 map 함수의 인자로 전달되는 함수 내부에서 컴포넌트 props를 설정하듯이 설정
key값은 언제나 유일
따라서 데이터가 가진 고윳값을 key 값으로 설정

## 3. 응용

push와 concat의 차이: push는 기존 배열 변경, concat은 새 배열 생성(복사)
불변성 유지: 리액트에서 상태를 업데이트할 때 기존 상태를 그대로 두면서 새로운 값을 상태로 설정
후에 리액트 컴포넌트의 성능 최적화 가능

불변성을 유지하면서 배열의 특정 항목을 지울 때는 배열의 내장 함수 filter 사용

// App.js //
import React, { Component } from "react";
import IterationSample from "./IterationSample";

class App extends Component {
  render() {
    return <IterationSample />;
  }
}

export default App;

// IterationSample.js //
import React, { useState } from "react";

const IterationSample = () => {
  const [names, setNames] = useState([
    { id: 1, text: "눈사람" },
    { id: 2, text: "얼음" },
    { id: 3, text: "눈" },
    { id: 4, text: "바람" }
  ]);
  const [inputText, setInputText] = useState("");
  const [nextId, setNextId] = useState(5); // 새로운 항목을 추가할 때 사용할 id

  const onChange = e => setInputText(e.target.value);
  const onClick = () => {
    const nextNames = names.concat({
      id: nextId, // nextId 값을 id로 설정하고
      text: inputText
    });
    setNextId(nextId + 1); // nextId 값에 1을 더해 준다.
    setNames(nextNames); // names 값을 업데이트한다.
    setInputText(""); // inputText를 비운다.
  };
  const onRemove = id => {
    const nextNames = names.filter(name => name.id !== id);
    setNames(nextNames);
  };

  const namesList = names.map(name => (
    <li key={name.id} onDoubleClick={() => onRemove(name.id)}>
      {name.text}
    </li>
  ));
  return (
    <>
      <input value={inputText} onChange={onChange} />
      <button onClick={onClick}>추가</button>
      <ul>{namesList}</ul>
    </>
  );
};

export default IterationSample;
